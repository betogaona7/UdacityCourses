""" Shortest-first search or Breadth-first search - Always choose of the frontier one of the paths that hadn't been 
consider yet that's the shortest possible. """

""" Cheapest-first search or Uniform-cost search - is guaranteed to find the path with the cheapest total cost """ 

""" Depth first, is in a way the opposite of breadth-first search, we always expand first the longest path, the path
with the most lengths in it """ 

""" Greedy best-first search, it expands first the path that's closest to the goal according to the estimate """

""" A-start (A*) algorithm, works by always expanding the path that has a minimum value of the funtion f, which is 
defined as a sum of the g + h components. Now, the function g of a path is just the path cost, and the function h of 
a path is equal to the h value of the state which is the final state of the path, which is equal to the estimate 
distance to the goal 

f = g + h
g(path) = path cost
h(path) = h(s) = estimate distance to goal 

h - straight line distance between state and the goal 

Minimizing g helps us keep the path short and minimizing h helps us keep focused on finding the goal.
That it finds the shortest length path while expandng the minimun numbers of paths possible (best estimated total path
cost first) 


A* will find the lowest-cost Ã¡th if the h function for a state is less that the true cost of the path to the goal through 
state, h is ortimistic and admissable, never overstimate 

h(s) < true cost

""" 


""" 
A -> S -> F
A node is a data structure, and it has four fields 
 1- state: indicates the state at the end of the path.  F
 2- action: The action it took to get there SF
 3- cost: The total cost 243
 4- parent: is a pointer to another node

Frontier - removing the best item from the frontier and adding in new ones, priority queue 
Explored - able to add new members and check for memberships, hashtable or tree 



